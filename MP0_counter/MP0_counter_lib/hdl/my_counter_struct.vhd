-- VHDL Entity MP0_counter_lib.my_counter.symbol
--
-- Created:
--          by - jklei.UNKNOWN (DESKTOP-R0A13SL)
--          at - 15:19:40 10/ 6/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY my_counter IS
   PORT( 
      IN2       : IN     std_logic_vector (3 DOWNTO 0);
      INC       : IN     STD_LOGIC;
      clk       : IN     std_logic;
      reset_val : IN     std_logic_vector (3 DOWNTO 0);
      my_sum    : OUT    std_logic_vector (3 DOWNTO 0)
   );

-- Declarations

END my_counter ;

--
-- VHDL Architecture MP0_counter_lib.my_counter.struct
--
-- Created:
--          by - jklei.UNKNOWN (DESKTOP-R0A13SL)
--          at - 15:19:40 10/ 6/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY MP0_counter_lib;

ARCHITECTURE struct OF my_counter IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Q : std_logic_vector(3 DOWNTO 0);
   SIGNAL X : STD_LOGIC_VECTOR(3 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL my_sum_internal : std_logic_vector (3 DOWNTO 0);


   -- Component Declarations
   COMPONENT Mux
   PORT (
      A   : IN     STD_LOGIC_VECTOR (3 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (3 DOWNTO 0);
      SEL : IN     STD_LOGIC;
      X   : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT adder
   PORT (
      IN1 : IN     std_logic_vector (3 DOWNTO 0);
      IN2 : IN     std_logic_vector (3 DOWNTO 0);
      SUM : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT reg
   PORT (
      CLK : IN     std_logic;
      I   : IN     std_logic_vector (3 DOWNTO 0);
      Q   : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Mux USE ENTITY MP0_counter_lib.Mux;
   FOR ALL : adder USE ENTITY MP0_counter_lib.adder;
   FOR ALL : reg USE ENTITY MP0_counter_lib.reg;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : Mux
      PORT MAP (
         SEL => INC,
         A   => reset_val,
         B   => my_sum_internal,
         X   => X
      );
   U_0 : adder
      PORT MAP (
         IN1 => Q,
         IN2 => IN2,
         SUM => my_sum_internal
      );
   U_2 : reg
      PORT MAP (
         I   => X,
         CLK => clk,
         Q   => Q
      );

   -- Implicit buffered output assignments
   my_sum <= my_sum_internal;

END struct;
